version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    ports:
      - "5001:5000"
    networks:
      - filiera360_default
    depends_on: 
      mysql:
        condition: service_healthy   #il backend deve dipendere dal database per evitare problemi di connessione
    environment:
      - MYSQL_HOST=mysql   # variabile d'ambiente 
      - MYSQL_USER=root     # 
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # password MySQL
      - MYSQL_DB=filiera360 # nome del database
    volumes:
      - .:/app
      - ./jsondb/:/app/jsondb:rw
    working_dir: /app

  frontend:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.frontend
    ports:
      - "3001:80"   # Da "3001:3001" a "3001:80"
    environment:
      - PORT=3001
      - HOST=0.0.0.0
      - BROWSER=none
    networks:
      - filiera360_default
    depends_on: 
      - backend 


  middleware:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.middleware
    ports:
      - "3000:3000"
    networks:
      - filiera360_default
      - fabric_test
    volumes:
      - ./linux_files/fabric-samples/test-network:/test-network:ro
    environment:
    - PEER_ENDPOINT=peer0.org1.example.com:7051

  mysql:
    networks:
      - filiera360_default
    image: mysql:8.0 
    container_name: mysql
    environment:
     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
     - MYSQL_DATABASE=filiera360
    ports:
      - "3306:3306" 
    volumes:
      - mysql_data:/var/lib/mysql # volume per far si che i dati del db non vengano persi
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10 

networks:
  filiera360_default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/16"
          gateway: "172.19.0.1"
  fabric_test:
    external: true

volumes:
  mysql_data: 
