In questo documento verranno spiegati i file e le cartelle principali di cui l'app è composta. 
Guardare il diagramma architetturale per una maggiore comprensione. 
Si può immaginare l'app come un insieme di 4 microservizi principali che comunicano tra loro, 
regolati dai 4 file che spiegheremo di seguito:

****************************
    FILE PRINCIPALI
****************************

[ product-tracking ] -> è la cartella che contiene il frontend React. Ogni pagina di questo frontend inoltrerà richieste al server Flask.

[ app.py ] -> è il file del server Flask che riceve tutte le richieste del frontend e le inoltra al server Node (middleware), previa autenticazione/autorizzazione.
Tiene traccia degli utenti e dei modelli 3D nella cartella jsondb.

[ appServer.js ] -> questo è un server Node che permette la comunicazione con il chaincode.
Espone al server Flask tutte le operazioni di lettura e scrittura dei prodotti su blockchain e dei relativi sensor/movement/certification data.

[ supplychain.js ] è il chaincode stesso presente nel canale, comprende diverse funzioni di creazione, update, letture e cancellazione del prodotto.
Si avvia automaticamente quando avvii i container Docker.
Queste funzioni si possono richiamare direttamente tramite comando peer.

****************************
AVVIO E GESTIONE PIATTAFORMA
****************************

-> aprire la cartella da VSCode:
    da Mac è sufficiente usare la GUI;
    da Windows navigare sulla cartella Filiera360 da WSL
    poi: code .

-> avviare i container (la blockchain):
    da docker desktop avviare il container "compose"

-> per avviare frontend/backend/middleware:
    docker compose up --build -d  
    [ funziona solo se sono già stati avviati i container di hyperledger ]

-> per propagare le modifiche di frontend/backend/middleware:
    docker compose up --build -d  
    ( la cartella jsodb consente di modificare in locale i file di database,
    e le modifiche vengono propagate in automatico! )

-> per propagare le modifiche del chaincode:
    spostarsi su Filiera360/linux_files
    cp -vr ./mychaincode/lib/supplyChain.js ./fabric-samples/mychaincode/lib/
    cd ./fabric-samples/test-network && ./network.sh deployCC -ccn basic -ccp ../mychaincode/ -ccl javascript && docker compose up --build -d 

-> per guardare i nomi dei container:
    docker ps 
(mostra info dei container attivi)

-> per aprire una shell (e guardare i file) dentro i container di frontend/backend/middleware:
(sostituire es. filiera360-backend-1 con quanto trovato in docker ps)
    docker exec -it filiera360-backend-1 /bin/bash
    docker exec -it filiera360-middleware-1 /bin/bash
    docker exec -it filiera360-frontend-1 /bin/bash

-> per guardare i log dei container:
(sostituire es. filiera360-backend-1 con quanto trovato in docker ps)
    docker logs filiera360-backend-1

-> per stoppare i container:
    docker compose stop